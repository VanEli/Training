q = load "PipelineTrendingDataset_Attributes";
q = filter q by 'OpportunityProcessedStatusDesc' in ["Pipeline", "Unqualified"];
q = filter q by 'PeriodCd' == "ME";
q = filter q by 'AttributeDesc' in all;
q = filter q by 'OpportunityId__c' in all;
q = filter q by 'QuarterClose' in all;
q = filter q by 'CROperatingGroup__c' in all;
q = filter q by 'OU__c' in all;
q = filter q by 'MasterClientClassDesc' in all;
q = filter q by 'GeographicUnitMod' in all;
q = filter q by 'SellingCountryNm__c' in all;
q = filter q by 'BusinessDimensionNm' in all;
q = filter q by 'ServiceGroupNm' in all;
q = filter q by 'MasterCustomerNm' in all;
q = filter q by 'CRClientServiceGroup__c' in all;
q = filter q by 'MonthInQuarter' == 2;

TPip = filter q by date('PipelineFutureDate_Year', 'PipelineFutureDate_Month', 'PipelineFutureDate_Day') in ["current year".."current day"];
TPip = filter TPip by  OpportunityId__c in all;
TPip = filter TPip by Stage__c in all;
TPip = group TPip by (PipelineFutureQuarterCloseWithMonth, SubServiceGroupNm, OpportunityId__c, Stage__c);
TPip = foreach TPip generate  PipelineFutureQuarterCloseWithMonth, avg(TPip.'TCNR__c') * avg(TPip.OfferingPctDefault) as 'pre_Core', unique(TPip.OpportunityId__c) as 'preOpps', first(TPip.Stage__c) as 'Stage__c' ;

TpipTotal = filter TPip by  'Stage__c' in ["1","2A","2B","3A","3B","0A"];
TpipTotal = group TpipTotal by all; 
Tpip0A = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "0 - Unqual" as 'Stages' ;
Tpip1 = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "1 - Value" as 'Stages' ;
Tpip2A = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "2 - Prop" as 'Stages' ;
Tpip2B = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "3 - Neg" as 'Stages' ;
Tpip3A = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "3A" as 'Stages' ;
Tpip3B = foreach TpipTotal generate sum(pre_Core) as 'pre_Core', "3B" as 'Stages' ;
TpipTotal = foreach TpipTotal generate sum(pre_Core) as 'sum_pctg', sum(preOpps) as 'Opps', "Total Pipeline" as 'Stages' ;

Tpipfinal = group TpipTotal by 'Stages'; 
Tpipfinal = foreach Tpipfinal generate (sum(TpipTotal.sum_pctg)/sum(TpipTotal.sum_pctg)*100) as '% of Pipeline', sum(TpipTotal.Opps) as 'Opps', TpipTotal.Stages as 'Stages';

unqual = group TPip by Stage__c; 
unqual = foreach unqual generate  sum(pre_Core) as 'sum_pctg', sum(preOpps) as 'Opps', case when Stage__c == "0A" then "0 - Unqual" when Stage__c == "1" then "1 - Value" when Stage__c == "2A" || Stage__c== "2B" then "2 - Prop" when Stage__c == "3A" || Stage__c== "3B" then "3 - Neg" else "Total Pipeline" end as 'Stages' ;

unqualfinal = union unqual, Tpip0A, Tpip1, Tpip2A, Tpip2B;
unqualfinal = group unqualfinal by 'Stages'; 
unqualfinal = foreach unqualfinal generate round((sum(sum_pctg)/sum(pre_Core)*100),2) as '% of Pipeline', sum(Opps) as 'Opps', Stages as 'Stages'; 

final = union Tpipfinal, unqualfinal;
